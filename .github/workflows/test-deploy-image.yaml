name: test-deploy-image
on:
  workflow_call:
    inputs:
      tag-prefix:
        required: false
        type: string
      image:
        required: false
        type: string
      registry-user:
        required: true
        type: string
      registry:
        required: true
        type: string
    secrets:
      registry-password:
        required: true
jobs:
  push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 8G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - name: Build image
        run: nix build '.#controller-image'

      - name: Run checks
        run: nix flake check

      - name: Generate image and tag
        run: |
          echo "image=${{ inputs.image || github.repository }}" >> $GITHUB_OUTPUT
          echo "tag=${{ inputs.tag-prefix || '' }}$(date +%s)" >> $GITHUB_OUTPUT
        id: image-info

      - name: Tag image
        run: podman tag "$(podman load --quiet < ./result | cut -d ' ' -f 3)" "${{ steps.image-info.outputs.image }}:${{ steps.image-info.outputs.tag }}"

      - name: Push to docker.io
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.image-info.outputs.image}}
          tags: ${{ steps.image-info.outputs.tag }}
          registry: ${{ inputs.registry }}
          username: ${{ inputs.registry-user }}
          password: ${{ secrets.registry-password || '' }}
